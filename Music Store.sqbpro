<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="/home/ubuntu/Documentos/codeacademy projects/SQL/Music Store/chinook.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="3928"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,6:mainalbums"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="albums" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="65"/><column index="2" value="300"/><column index="3" value="60"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="customers" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="94"/><column index="2" value="80"/><column index="3" value="95"/><column index="4" value="300"/><column index="5" value="299"/><column index="6" value="146"/><column index="7" value="49"/><column index="8" value="112"/><column index="9" value="87"/><column index="10" value="148"/><column index="11" value="141"/><column index="12" value="210"/><column index="13" value="105"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="employees" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="90"/><column index="2" value="77"/><column index="3" value="80"/><column index="4" value="140"/><column index="5" value="78"/><column index="6" value="145"/><column index="7" value="145"/><column index="8" value="204"/><column index="9" value="77"/><column index="10" value="44"/><column index="11" value="64"/><column index="12" value="87"/><column index="13" value="132"/><column index="14" value="132"/><column index="15" value="192"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="invoice_items" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="102"/><column index="2" value="71"/><column index="3" value="58"/><column index="4" value="72"/><column index="5" value="69"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="invoices" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="71"/><column index="2" value="89"/><column index="3" value="145"/><column index="4" value="299"/><column index="5" value="146"/><column index="6" value="90"/><column index="7" value="112"/><column index="8" value="133"/><column index="9" value="45"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="playlist_track" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="72"/><column index="2" value="58"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1">/*Which tracks appeared in the most playlists? how many playlist did they appear in?*/

/*SELECT tracks.name AS &quot;Name&quot;, COUNT(playlist_track.playlistId) AS number_of_playlists  FROM playlist_track
JOIN tracks ON playlist_track.TrackId = tracks.TrackId
JOIN playlists ON playlist_track.PlaylistId = playlists.PlaylistId 
GROUP BY tracks.TrackId
ORDER BY number_of_playlists DESC;*/

/*Which track generated the most revenue? which album? which genre?*/

/*TRACK*/
/*SELECT tracks.name, SUM (invoices.total) AS Total_revenue FROM tracks
JOIN invoice_items ON tracks.TrackId = invoice_items.TrackId
JOIN invoices ON invoice_items.InvoiceId = invoices.InvoiceId
GROUP BY tracks.name
ORDER BY Total_revenue DESC
LIMIT 1;*/

/*ALBUMS*/
/*SELECT albums.Title, SUM (invoices.total) AS Total_revenue FROM tracks
JOIN albums ON tracks.AlbumId = albums.AlbumId
JOIN invoice_items ON tracks.TrackId = invoice_items.TrackId
JOIN invoices ON invoice_items.InvoiceId = invoices.InvoiceId
GROUP BY albums.Title
ORDER BY Total_revenue DESC
LIMIT 1;*/

/*GENRE*/
/*SELECT genres.Name, SUM (invoices.total) AS Total_revenue FROM tracks
JOIN genres ON tracks.GenreId = genres.GenreId
JOIN invoice_items ON tracks.TrackId = invoice_items.TrackId
JOIN invoices ON invoice_items.InvoiceId = invoices.InvoiceId
GROUP BY genres.Name
ORDER BY Total_revenue DESC
LIMIT 1;*/

/*Which countries have the highest sales revenue? What percent of total revenue does each country make up?*/

/*WITH revenue_total AS (
SELECT SUM(total) AS total_sum FROM invoices),

country_revenue AS (
SELECT BillingCountry, SUM(total) AS revenue
FROM invoices
GROUP BY BillingCountry
ORDER BY revenue DESC), 

percentage_country AS (
SELECT country_revenue.BillingCountry, ROUND(((revenue/total_sum)*100),2) AS percentage FROM country_revenue,revenue_total
ORDER BY percentage DESC)

SELECT country_revenue.BillingCountry, country_revenue.revenue, percentage_country.percentage FROM percentage_country
JOIN country_revenue ON percentage_country.BillingCountry = country_revenue.BillingCountry;*/

/*How many customers did each employee support, what is the average revenue for each sale and what is their total sale?*/ 

/*SELECT employees.FirstName AS &quot;Employee&quot;, COUNT(customers.CustomerId) AS &quot;Qnt. Supported Customers&quot;, ROUND(AVG(invoices.total), 2) AS &quot;Average Sale&quot;, ROUND(SUM(invoices.total), 2) AS &quot;Total Sale&quot; FROM customers
JOIN employees ON customers.SupportRepId = employees.EmployeeId
JOIN invoices ON customers.CustomerId = invoices.CustomerId
GROUP BY employees.EmployeeId*/

/*INTERMEDIATE CHALLENGE*/ 

/*Do longer or shorter length albums tend to generate more revenue*/
/*WITH album_length AS (
	SELECT albums.AlbumId, COUNT(tracks.TrackId) AS tracks_number FROM tracks
	JOIN albums ON albums.AlbumId = tracks.AlbumId
	GROUP BY albums.AlbumId)

SELECT albums.AlbumId, album_length.tracks_number, SUM(invoice_items.UnitPrice) AS revenue FROM invoice_items
JOIN tracks ON invoice_items.TrackId = tracks.TrackId
JOIN albums ON tracks.AlbumId = albums.AlbumId
JOIN album_length ON album_length.AlbumId = albums.AlbumId
GROUP BY albums.AlbumId
ORDER BY revenue DESC*/

/*Is the number of times a track appear in any playlist a good indicator of sales?*/

/*WITH playlist_number AS (
SELECT tracks.TrackId AS TrackId, COUNT(playlist_track.PlaylistId) AS count_playlists FROM tracks
JOIN playlist_track ON tracks.TrackId = playlist_track.TrackId
GROUP BY 1),

sales_per_track AS (
SELECT tracks.TrackId AS TrackId, SUM(invoice_items.UnitPrice * invoice_items.Quantity) AS sales FROM tracks
JOIN invoice_items ON invoice_items.TrackId = tracks.TrackId
GROUP BY 1
)

SELECT tracks.TrackId, tracks.name, playlist_number.count_playlists, sales_per_track.sales FROM tracks
JOIN playlist_number ON playlist_number.TrackId = tracks.TrackId
JOIN sales_per_track ON sales_per_track.TrackId = tracks.TrackId
GROUP BY 1
ORDER BY 3 DESC*/

/*ADVANCED CHALLENGE*/

/*How much revenue is generated each year, and what is its percent change from the previous year?*/ 

/*ALTER TABLE invoices
ADD COLUMN year INT*/

/*UPDATE invoices
SET year = CAST (strftime('%Y', InvoiceDate) AS INTEGER);*/

/*WITH year_sale AS (
	SELECT 
	year,
	SUM(Total) AS revenue_year
	FROM invoices
	GROUP BY 1
	ORDER BY 1 DESC
),

previous_year_sale AS (
	SELECT
	year + 1 AS year_ahead,
	revenue_year AS revenue_previous_year
	FROM year_sale
	)

SELECT 
	year_sale.year,
	year_sale.revenue_year ,
	ROUND((100 * (year_sale.revenue_year - previous_year_sale.revenue_previous_year) / previous_year_sale.revenue_previous_year),2) AS percentage_difference
FROM year_sale
LEFT JOIN previous_year_sale ON year_sale.year = previous_year_sale.year_ahead;*/</sql><current_tab id="0"/></tab_sql></sqlb_project>
